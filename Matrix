import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    static Map<Integer,List<Integer[]>> adj;
    static boolean[] isMachine;
    static int noOfCities= 0;
    static Set<Integer> visited;
    static int  totalMinTime = 0;
    static int minTime(int[][] roads, int[] machines) {
        noOfCities = roads.length + 1;
        markCitiesAsMachine(machines);
        buildCities(roads);
        visited = new HashSet<Integer>();
        dfsCities(0,0);
        return totalMinTime;
    }
    
    private static int dfsCities(int city, int time){
        visited.add(city);
        int totalTime=0;
        int maxTime = 0;
        for(Integer[] connectedCity : adj.get(city)){
            if(visited.contains(connectedCity[0])) 
                continue;
            int neighborTime  = dfsCities(connectedCity[0],connectedCity[1]);
            totalTime = totalTime + neighborTime;
            maxTime = Math.max(maxTime, neighborTime);
        }
        if(isMachine[city]) {
            totalMinTime += totalTime;
            return time;
        } else  {
            totalMinTime += totalTime - maxTime;
            return Math.min(maxTime, time);
        }
    }
    
    private static void markCitiesAsMachine(int[] machines){
        isMachine = new boolean[noOfCities];
        for(int machine : machines){
            isMachine[machine]  =  true;
        } 
    }
    
    private static void buildCities(int[][] roads){
        adj = new  HashMap<Integer,List<Integer[]>>();
        for(int[] road : roads) {
            int src = road[0];
            int dest = road[1];
            int wt = road[2];
            
            if(!adj.containsKey(src))
                adj.put(src,new ArrayList<Integer[]>());
            if(!adj.containsKey(dest))
                adj.put(dest,new ArrayList<Integer[]>());
            
            List<Integer[]> tempList = adj.get(src);
            tempList.add(new Integer[]{dest,wt});
            adj.put(src,tempList);
            
            tempList = adj.get(dest);
            tempList.add(new Integer[]{src,wt});
            adj.put(dest,tempList);
        }
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nk = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nk[0]);

        int k = Integer.parseInt(nk[1]);

        int[][] roads = new int[n - 1][3];

        for (int i = 0; i < n - 1; i++) {
            String[] roadsRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
            for (int j = 0; j < 3; j++) {
                int roadsItem = Integer.parseInt(roadsRowItems[j]);
                roads[i][j] = roadsItem;
            }
        }

        int[] machines = new int[k];

        for (int i = 0; i < k; i++) {
            int machinesItem = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
            machines[i] = machinesItem;
        }

        int result = minTime(roads, machines);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
